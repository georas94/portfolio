{% extends 'base.html.twig' %}
{% block body %}
    <div class="md:max-w-6xl mx-auto p-4 space-y-6">
        <form id="filter-form" class="grid grid-cols-1 md:grid-cols-4 gap-4">
            <input type="text" name="q" value="{{ q }}" placeholder="Recherche..." class="border p-2 rounded" />
            <div>
                <label for="min" class="block text-sm text-gray-600">Min</label>
                <input type="number"
                       id="min"
                       name="min"
                       value="{{ min is not empty ? min : '' }}"
                       placeholder="Budget min"
                       class="border p-2 rounded w-full" />
            </div>

            <div>
                <label for="max" class="block text-sm text-gray-600">
                    Max
                    {% if filterMaxValue %}
                        <span class="text-xs text-gray-500">(max: {{ filterMaxValue|number_format(0, '', ' ') }} FCFA)</span>
                    {% endif %}
                </label>
                <input type="number"
                       id="max"
                       name="max"
                       value="{{ max is not empty ? max|number_format(0, '', ' ') : filterMaxValue|number_format(0, '', ' ') }}"
                       placeholder="Budget max"
                       class="border p-2 rounded w-full" />
            </div>
            <button id="filter-btn" type="button" class="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700">
                Filtrer
            </button>
        </form>

        <!-- Conteneur principal avec ordre invers√© sur mobile -->
        <div class="flex flex-col md:flex-row gap-6">
            <div id="spinner" class="flex justify-center items-center py-4 hidden">
                <svg class="animate-spin h-6 w-6 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor"
                          d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z">
                    </path>
                </svg>
            </div>
            <div id="result-list" class="space-y-4 overflow-auto max-h-96 order-3 md:order-1 md:w-1/2">
                {# R√©sultats d'abord server-side, pour le SEO et le premier chargement #}
                {% for ao in aos %}
                    <div class="p-4 bg-white shadow rounded border cursor-pointer">
                        <h3 class="font-semibold">{{ ao.titre }}</h3>
                        <p class="text-sm text-gray-600">{{ ao.entreprise.nom }} - {{ ao.budget|number_format(0,'',' ') }} FCFA</p>
                    </div>
                {% else %}
                    <p class="text-gray-500">Aucun r√©sultat.</p>
                {% endfor %}
            </div>
            <div id="map" class="h-96 rounded border order-2 md:order-2 md:w-1/2"></div>
        </div>
    </div>
    {% block javascripts %}
        <script>
            document.addEventListener('DOMContentLoaded', function () {
                // Initialisation de la carte
                const map = L.map('map').setView([12.2383, -1.5616], 7);
                L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {
                    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>'
                }).addTo(map);

                // Configuration avanc√©e du cluster
                const markersCluster = L.markerClusterGroup({
                    maxClusterRadius: 45,
                    spiderfyOnMaxZoom: true,
                    showCoverageOnHover: false,
                    zoomToBoundsOnClick: true,
                    // spiderfyOnMaxZoom: false, // D√©sactive l'√©clatement auto
                    // showCoverageOnHover: false,
                    iconCreateFunction: function (cluster) {
                        const count = cluster.getChildCount();
                        let size = 'small';

                        if (count > 50) size = 'large';
                        else if (count > 10) size = 'medium';

                        // Ic√¥ne SVG personnalis√©e avec votre palette
                        const svgIcon = `
                        <svg width="44" height="44" viewBox="0 0 44 44">
                            <circle cx="22" cy="22" r="18" fill="${size === 'large' ? '#E63946' : size === 'medium' ? '#E9C46A' : '#529D58'}" opacity="0.7"/>
                            <circle cx="22" cy="22" r="14" fill="${size === 'large' ? '#E63946' : size === 'medium' ? '#E9C46A' : '#529D58'}"/>
                            <text x="22" y="26" font-size="14" fill="white" text-anchor="middle" font-weight="bold" font-family="Inter">
                                ${count}
                            </text>
                        </svg>`;

                        return L.divIcon({
                            html: svgIcon,
                            className: 'marker-cluster-custom',
                            iconSize: L.point(44, 44)
                        });
                    },
                    zoomToCluster(bounds) {
                        map.fitBounds([
                            [bounds._southWest.lat, bounds._southWest.lng],
                            [bounds._northEast.lat, bounds._northEast.lng]
                        ], { padding: [50, 50] });
                    },
                    onClusterClick: function (cluster) {
                        const markers = cluster.getAllChildMarkers();
                        const sample = markers.slice(0, 5).map(m => m.projetData);
                        cluster.bindPopup(`
                        <h3>${markers.length} projets</h3>
                        <ul>
                            ${sample.map(ao => `
                                <li><a href="/ao/${ao.id}">${ao.titre}</a></li>
                            `).join('')}
                        </ul>
                    `).openPopup();
                    }
                });

                // Donn√©es des projets
                const projets = [
                    {% for ao in aos %}
                    {
                        id: {{ ao.id }},
                        lat: {{ ao.location['lat'] }},
                        lng: {{ ao.location['lng'] }},
                        secteurCode: "{{ ao.entreprise.sectorCodeData.code }}",
                        budget: {{ ao.budget }},
                        popup: `<div class="popup-content">
                        <h3 class="font-bold">{{ ao.titre }}</h3>
                        <p><span class="font-semibold">Secteur:</span> {{ ao.entreprise.sectorCodeData.label }}</p>
                        <p><span class="font-semibold">Budget:</span> {{ ao.budget|number_format(0, ',', ' ') }} XOF</p>
                        <div class="mt-2">
                            <a href="{{ path('app_ao_detail', {id: ao.id}) }}" class="inline-block px-3 py-1 bg-primary text-white text-sm rounded hover:bg-green-600 transition-colors">
                                Voir d√©tails
                            </a>
                        </div>
                    </div>`
                    }{% if not loop.last %},{% endif %}
                    {% endfor %}
                ];

                // Cr√©ation des marqueurs
                // Configuration des ic√¥nes par type de secteur (√† placer avant la boucle forEach)
                const secteurIcons = {
                    'BTP': 'üèóÔ∏è',    // B√¢timent/Travaux Publics
                    'INF': 'üíª',     // Informatique
                    'ENV': 'üå≥',     // Environnement
                    'SANT': 'üè•',    // Sant√©
                    'AGR': 'üöú',     // Agriculture
                    'EDU': 'üè´',     // √âducation
                    'ENE': 'üí°',     // √ânergie
                    'EAU': 'üíß'      // Eau
                };

                // Stockage des marqueurs dans un tableau
                const markers = [];

                // Cr√©ation des marqueurs
                projets.forEach(projet => {
                    const secteurKey = projet.secteurCode.substring(0, 3);
                    const customIcon = L.divIcon({
                        html: `
                            <div class="relative">
                                <svg width="36" height="36" viewBox="0 0 36 36">
                                    <circle cx="18" cy="18" r="16" fill="#529D58" stroke="#FFF" stroke-width="2"/>
                                </svg>
                                <div class="absolute inset-0 flex items-center justify-center text-white text-xl">
                                    ${secteurIcons[secteurKey] || 'üìç'}
                                </div>
                            </div>
                        `,
                        className: '',
                        iconSize: [36, 36],
                        popupAnchor: [0, -18]
                    });

                    const marker = L.marker([projet.lat, projet.lng], {
                        icon: customIcon
                    });

                    // 1. On bind un popup de chargement par d√©faut
                    marker.bindPopup(`
                        <div class="p-4 text-center">
                            <div class="animate-spin inline-block w-6 h-6 border-2 border-blue-500 rounded-full"></div>
                            <p class="mt-2">Chargement des d√©tails...</p>
                        </div>
                    `);

                    // 2. On stocke les donn√©es du projet pour les r√©utiliser au clic
                    marker.projetData = projet;

                    // 3. Gestion du clic dynamique
                    marker.on('click', async function() {
                        try {
                            const response = await fetch(`/api/popup/${this.projetData.id}`);
                            if (!response.ok) throw new Error('Erreur de chargement');

                            const popupContent = await response.text();
                            this.setPopupContent(popupContent);
                        } catch (error) {
                            this.setPopupContent(`
                                <div class="p-4 text-red-500">
                                    Impossible de charger les d√©tails<br>
                                    <button onclick="this.closest('.leaflet-popup')._source.openPopup()">
                                        R√©essayer
                                    </button>
                                </div>
                            `);
                        }
                    });

                    markersCluster.addLayer(marker);
                });

                // Fonction de filtrage corrig√©e
                function updateMapFilters() {
                    const secteur = document.getElementById('secteur-filter').value;
                    const budget = parseInt(document.getElementById('budget-filter').value) || 0;

                    markersCluster.clearLayers();

                    let visibleCount = 0;

                    markers.forEach(marker => {
                        const projet = marker.projetData;
                        const secteurMatch = secteur === "" || projet.secteurCode === secteur;
                        const budgetMatch = budget === 0 || projet.budget <= budget;

                        if (secteurMatch && budgetMatch) {
                            markersCluster.addLayer(marker);
                            visibleCount++;
                        }
                    });

                    document.getElementById('budget-value').innerText = formatXOF(budget);
                }

                map.addLayer(markersCluster);

                map.on('moveend', async function() {
                    const visibleBounds = map.getBounds();
                    const visibleMarkers = markers.filter(m => visibleBounds.contains(m.getLatLng()));

                    await Promise.all(visibleMarkers.map(marker =>
                        fetch(`/api/popup/${marker.projetData.id}`)
                            .then(r => r.text())
                            .then(html => {
                                // Stocke le contenu pour usage ult√©rieur
                                marker._popupContentCache = html;
                                // Met √† jour directement si le popup est ouvert
                                if (marker.isPopupOpen()) marker.setPopupContent(html);
                            })
                            .catch(console.error)
                    ));
                });
                // Format XOF
                function formatXOF(val) {
                    return val === 0 ? "Tous budgets" : val.toLocaleString('fr-FR') + ' XOF';
                }

                // √âv√©nements de mise √† jour des filtres
                if (document.getElementById('secteur-filter')) {
                    document.getElementById('secteur-filter').addEventListener('change', updateMapFilters);
                }
                if (document.getElementById('budget-filter')) {
                    document.getElementById('budget-filter').addEventListener('input', function () {
                        updateMapFilters();
                    });
                }
                if (document.getElementById('budget-filter')) {
                    document.getElementById('budget-filter').addEventListener('input', function () {
                        updateMapFilters();
                    });
                }

                document.getElementById('filter-btn').addEventListener('click', async function() {
                    const form = document.getElementById('filter-form');
                    const formData = new URLSearchParams(new FormData(form));
                    const url = '{{ path("app_ao_list") }}?' + formData.toString();
                    const spinner = document.getElementById('spinner');
                    spinner.classList.remove('hidden');
                    try {
                        const response = await fetch(url, {
                            headers: { 'X-Requested-With': 'XMLHttpRequest' }
                        });
                        const data = await response.json();

                        // Mise √† jour de la liste des r√©sultats
                        document.getElementById('result-list').innerHTML = data.html;

                        // Mise √† jour de la carte (Leaflet)
                        markersCluster.clearLayers();
                        data.markers.forEach(markerData => {
                            const marker = L.marker([markerData.lat, markerData.lng])
                                .bindPopup(markerData.popup);
                            markersCluster.addLayer(marker);
                        });

                    } catch (error) {
                        document.getElementById('result-list').innerHTML = '<div class="max-w-md mx-auto mb-8"> <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4" role="alert">Erreur lors du chargement des donn√©es</div> </div>';
                        console.error('Erreur AJAX :', error);
                    } finally {
                        spinner.classList.add('hidden');
                    }
                });
            });
        </script>
    {% endblock %}
{% endblock %}